/**
 * Implement Gatsby's Node APIs in this file.
 *
 * See: https://www.gatsbyjs.org/docs/node-apis/
 */

const path = require(`path`);
const _ = require(`lodash`);
const kontentItemTypeIdentifier = `KontentItem`;

exports.onCreateNode = ({ node, actions: { createNodeField } }) => {
  // Only get items generated by Kentico Kontent
  if (
    _.has(node, `internal.type`) &&
    _.isString(node.internal.type) &&
    node.internal.type.startsWith(kontentItemTypeIdentifier)
  ) {
    let data = {};

    // Content pages
    if (node.internal.type.includes("Column")) {
      data.name = node.elements.page_name.value;
      data.url = node.elements.url.value;
      data.content = node.elements.main_body_copy.value;
      data.type = "content";
    }

    // Briefing pages
    if (node.internal.type.includes("Briefing")) {
      data.name = node.elements.briefing_name.value;
      data.url = node.elements.url.value;
      data.content = node.elements.main_body_copy.value;
      data.content_short = node.elements.short_desc_.value;
      data.type = "briefing";
    }

    // Create custom fields for each item
    Object.keys(data).forEach(key => {
      createNodeField({
        node,
        name: key,
        value: data[key],
      });
    });
  }
};

exports.createPages = async ({ graphql, actions }) => {
  const { createPage } = actions;
  const query = await graphql(`
    {
      allKontentItem {
        edges {
          node {
            id
            ... on KontentItemOneColumnContent {
              fields {
                name
                url
                type
                content
              }
            }
            ... on KontentItemTwoColumnContent {
              fields {
                name
                url
                type
                content
              }
            }
            ... on KontentItemThreeColumnContent {
              fields {
                name
                url
                type
                content
              }
            }
            ... on KontentItemBriefings {
              fields {
                name
                url
                type
                content
                content_short
              }
            }
          }
        }
      }
    }
  `);

  const fs = require("fs");
  var content = "unique_id\tname\turl_detail\tdescription_short\n";

  query.data.allKontentItem.edges.forEach(({ node }) => {
    if (node.fields && node.fields.url && node.id) {
      createPage({
        path: node.fields.url,
        component: path.resolve(`src/templates/content.js`),
        context: Object.assign({ id: node.id }, node.fields),
      });
      if (node.fields.type == "briefing") {
        content += node.id + "\t";
        content += node.fields.name + "\t";
        content += node.fields.url + "\t";
        content += node.fields.content_short + "\t";
        content += "\n";
      }
    }
  });

  fs.appendFile("static/hawksearch/content.txt", content, err => {
    if (err) {
      console.error(err);
      return;
    }
    //file written successfully
  });
};
